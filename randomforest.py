# -*- coding: utf-8 -*-
"""RandomForest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GBykXfvLO_xtgaxSU0us56BCHFigFYmg
"""

import csv
def load_data(filename):
    dataset = []
    csvfile = open(filename, newline = '')
    reader = csv.reader(csvfile)
    for i in reader:
        dataset.append(i)
    return dataset

from google.colab import drive

drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn

path_link = "/content/drive/MyDrive/ML Assignment/football.csv"
data = pd.read_csv(path_link)
dataframe=pd.DataFrame(data)
dataframe.head()

dataframe.shape

dataframe.columns

from sklearn.preprocessing import LabelEncoder

#perform label encoding on col1, col2 columns
dataframe[['league_name', 'preferred_foot','work_rate','body_type','player_traits','player _tags']] = dataframe[['league_name', 'preferred_foot','work_rate','body_type','player_traits','player_tags']].apply(LabelEncoder().fit_transform)

dataframe = dataframe.loc[:, ['sofifa_id',  'overall', 'potential', 'value_eur',
       'age', 'height_cm', 'weight_kg',
       'league_name', 'league_level',
       'weak_foot', 'skill_moves',
       'international_reputation', 'work_rate', 'body_type',
       'release_clause_eur', 'player_traits', 'pace',
       'shooting', 'passing', 'dribbling', 'defending', 'physic',
       'attacking_crossing', 'attacking_finishing',
       'attacking_heading_accuracy', 'attacking_short_passing',
       'attacking_volleys', 'skill_dribbling', 'skill_curve',
       'skill_fk_accuracy', 'skill_long_passing', 'skill_ball_control',
       'movement_acceleration', 'movement_sprint_speed', 'movement_agility',
       'movement_reactions', 'movement_balance', 'power_shot_power',
       'power_jumping', 'power_stamina', 'power_strength', 'power_long_shots',
       'mentality_aggression', 'mentality_interceptions',
       'mentality_positioning', 'mentality_vision', 'mentality_penalties',
       'mentality_composure', 'defending_marking_awareness',
       'defending_standing_tackle', 'defending_sliding_tackle',
       'goalkeeping_diving', 'goalkeeping_handling', 'goalkeeping_kicking',
       'goalkeeping_positioning', 'goalkeeping_reflexes', 'goalkeeping_speed',
       'contribution_type']]

dataframe.dropna(axis=1,how='any')
#dataframe.dropna(axis=0,how='any')

dataframe['value_eur'].fillna(dataframe['value_eur'].mean(), inplace=True)
dataframe['league_level'].fillna(dataframe['league_level'].mean(), inplace=True)
dataframe['release_clause_eur'].fillna(dataframe['release_clause_eur'].mean(), inplace=True)
dataframe['pace'].fillna(dataframe['pace'].mean(), inplace=True)
dataframe['shooting'].fillna(dataframe['shooting'].mean(), inplace=True)
dataframe['passing'].fillna(dataframe['passing'].mean(), inplace=True)
dataframe['dribbling'].fillna(dataframe['dribbling'].mean(), inplace=True)
dataframe['physic'].fillna(dataframe['physic'].mean(), inplace=True)
dataframe['defending'].fillna(dataframe['defending'].mean(), inplace=True)

dataframe=dataframe.drop(columns=['goalkeeping_speed'])

def train_test(dataframe, split_value):
    n = int(split_value*len(dataframe))

    train_data = dataframe.iloc[:n, :]
    test_data =  dataframe.iloc[n:, :]

    return train_data,test_data

train_data, test_data = train_test(dataframe, 0.8)

X_train_multi_all = train_data.loc[:, train_data.columns != 'contribution_type'].to_numpy()
X_test_multi_all = test_data.loc[:, test_data.columns != 'contribution_type'].to_numpy()

Y_train = train_data.loc[:,train_data.columns == 'contribution_type'].to_numpy()
Y_test = test_data['contribution_type'].to_numpy()

from sklearn.model_selection import train_test_split

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(n_estimators=50, random_state=7)
model.fit(X_train_multi_all, Y_train)

from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.metrics import f1_score
from sklearn.metrics import accuracy_score

Y_test = test_data['contribution_type'].to_numpy()
Y_pred=model.predict(X_test_multi_all)
#print(mean_squared_error(Y_test,Y_pred))
#print(mean_absolute_error(Y_pred, Y_test))
#print(r2_score(Y_pred,Y_test))
print(f1_score(Y_test,Y_pred))
print(accuracy_score(Y_test,Y_pred))

X_train_multi_all = train_data.loc[:, train_data.columns != 'overall'].to_numpy()
X_test_multi_all = test_data.loc[:, test_data.columns != 'overall'].to_numpy()

Y_train = train_data.loc[:,train_data.columns == 'overall'].to_numpy()
Y_test = test_data['overall'].to_numpy()

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(n_estimators=50, random_state=7)
model.fit(X_train_multi_all, Y_train)

from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.metrics import f1_score
from sklearn.metrics import accuracy_score


Y_pred=model.predict(X_test_multi_all)
print(mean_squared_error(Y_test,Y_pred))
print(mean_absolute_error(Y_pred, Y_test))
#print(r2_score(Y_pred,Y_test))

#print(accuracy_score(Y_test,Y_pred))

